System:
Solve the following coding problem. Wrap your code answer using ```


Question:
Write a unit test unit using the `pytest` framework for a simple Python class that processes a list of numerical data, including tests for edge cases such as empty list and invalid input types.


Answer:
Here's an example of how you can write a unit test for a simple Python class that processes a list of numerical data:

```python
import pytest

class NumericalProcessor:
    def __init__(self, data):
        self.data = data

    def process(self):
        if not self.data:
            raise ValueError("Empty list")
        if not all(isinstance(x, (int, float)) for x in self.data):
            raise TypeError("Invalid input type")
        return sum(self.data)

def test_empty_list():
    with pytest.raises(ValueError):
        NumericalProcessor([]).process()

def test_invalid_input_type():
    with pytest.raises(TypeError):
        NumericalProcessor([1, 2, "3"]).process()

def test_valid_input():
    assert NumericalProcessor([1, 2, 3]).process() == 6
```

In this example, we define a `NumericalProcessor` class that takes a list of numerical data as input and processes it by summing all the numbers. We then write three unit tests using the `pytest` framework to test the class's behavior:

- `test_empty_list`: This test checks that the `process` method raises a `ValueError` when an empty list is passed as input.
- `test_invalid_input_type`: This test checks that the `process` method raises a `TypeError` when a list with non-numerical elements is passed as input.
- `test_valid_input`: This test checks that the `process` method returns the correct sum when a valid list of numerical data is passed as input.

By writing unit tests for your code, you can ensure that it works as expected and catch any potential bugs or issues early on in the development process.<|endoftext|>